{"version":3,"sources":["redux/contacts/contacts.types.js","redux/contacts/contacts.reducer.js","redux/rootReducer.js","redux/store.config.js","Components/ContactCard/ContactCard.js","Components/SearchBar/SearchBar.js","redux/contacts/contacts.actions.js","Components/ContactsContainer/ContactsContainer.js","Components/CreateContact/CreateContact.js","Components/ContactDetails/ContactDetails.js","Components/PhoneBook/PhoneBook.js","App.js","serviceWorker.js","index.js"],"names":["contactTypes","DELETE_CONTACT","ADD_CONTACT","UPDATE_CONTACT","SET_SEARCH","initialState","contacts","id","name","phone","email","address","details","search","contactsReducer","state","action","type","payload","types","filter","contact","combineReducers","middlewares","logger","store","createStore","rootReducer","applyMiddleware","ContactCard","props","to","className","src","alt","connect","setSearch","inputValue","onChange","e","target","value","placeholder","filteredContacts","toLowerCase","includes","toString","icon","faPlus","map","key","addContact","newContact","history","useHistory","useState","setContact","changeHandler","class","faChevronLeft","onClick","faBroom","preventDefault","push","faCheck","deleteContact","contactId","updateContact","useParams","editMode","setEditMode","find","editContactHandler","event","prevContact","copyContacts","editedContact","nextContact","Object","keys","forEach","contactKey","faPen","faCommentDots","faPhoneAlt","faVideo","faEnvelope","removeHanlder","PhoneBook","path","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e3484e47.chunk.js","sourcesContent":["const contactTypes = {\r\n    DELETE_CONTACT: \"DELETE_CONTACT\",\r\n    ADD_CONTACT: \"ADD_CONTACT\",\r\n    UPDATE_CONTACT: \"UPDATE_CONTACT\",\r\n    SET_SEARCH: \"SET_SEARCH\"\r\n}\r\n\r\nexport default contactTypes","import types from './contacts.types'\r\nimport contactTypes from './contacts.types'\r\n\r\nconst initialState = {\r\n    contacts: [{\r\n        id: 1,\r\n        name: 'Ed Boon',\r\n        phone: 98912123456,\r\n        email: 'noobde@gmail.com',\r\n        address: 'Los Angles, CA',\r\n        details: 'get over here!'\r\n    }, {\r\n        id: 2,\r\n        name: 'Alejandro Gonzales Inarrito',\r\n        phone: 98912123467,\r\n        email: 'AlejandroGInarrito@gmail.com',\r\n        address: 'Mexico city, Mexico',\r\n        details: 'Working on my new title, not the revenant'\r\n    }, {\r\n        id: 3,\r\n        name: 'Jorgen Klopp',\r\n        phone: 98912123467,\r\n        email: 'JorgenKlopp@gmail.com',\r\n        address: 'Liverpool, England',\r\n        details: \"I'm coach of Liverpool FC\"\r\n    }, {\r\n\r\n        id: 4,\r\n        name: 'Hanz Zimmer',\r\n        phone: 98912123467,\r\n        email: 'hansimmer@gmail.com',\r\n        address: 'Berlin, Germany',\r\n        details: \"Batman OST is my work\"\r\n    }],\r\n    search: ''\r\n}\r\n\r\nconst contactsReducer = (state = initialState, action) => {\r\n\r\n    const { type, payload } = action\r\n\r\n    switch (type) {\r\n        case types.ADD_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: [...state.contacts, payload]\r\n            }\r\n        case types.DELETE_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== payload)\r\n            }\r\n        case types.UPDATE_CONTACT:\r\n            return {\r\n                ...state,\r\n                contacts: payload\r\n            }\r\n        case types.SET_SEARCH:\r\n            return {\r\n                ...state,\r\n                search: payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default contactsReducer","import { combineReducers } from 'redux'\r\n\r\nimport contactsReducer from './contacts/contacts.reducer'\r\n\r\nexport default combineReducers({\r\n    contacts: contactsReducer\r\n})","import { applyMiddleware, createStore } from 'redux'\r\nimport { logger } from 'redux-logger'\r\n\r\nimport rootReducer from './rootReducer'\r\n\r\nconst middlewares = [logger]\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(...middlewares)\r\n)\r\n\r\nexport default store","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './ContactCard.scss'\r\n\r\n\r\nfunction ContactCard(props) {\r\n    const { contact } = props\r\n\r\n    return (\r\n        <td>\r\n            <Link to={`/contact/${contact.id}`}>\r\n                <div className='ContactCard'>\r\n                    <div className='ContactCard-image'>\r\n                        <img src={'https://api.adorable.io/avatars/256/Ali@adorable.png' + contact.id} alt='profile' />\r\n                    </div>\r\n                    <div className='ContactCard-name'>\r\n                        <div className='ContactCard-name--title'>{contact.name}</div>\r\n                        <div className='ContactCard-name--subtitle'>{contact.phone}</div>\r\n                    </div>\r\n                    <div></div>\r\n                </div>\r\n            </Link>\r\n        </td >\r\n    )\r\n}\r\n\r\nexport default ContactCard\r\n","import React from 'react'\r\nimport './SearchBar.scss'\r\nimport { setSearch } from '../../redux/contacts/contacts.actions'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nfunction SearchBar({setSearch}) {\r\n    return (\r\n        <div className=\"SearchBar\">\r\n            <input onChange={e => setSearch(e.target.value)} placeholder=\"Search the contact ... \" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null, { setSearch })(SearchBar)","import types from './contacts.types'\r\n\r\nconst addContact = (newContact) => {\r\n    return {\r\n        payload: newContact,\r\n        type: types.ADD_CONTACT\r\n    }\r\n}\r\n\r\nconst deleteContact = (contactId) => {\r\n    return {\r\n        payload: contactId,\r\n        type: types.DELETE_CONTACT\r\n    }\r\n}\r\n\r\nconst updateContact = (contact) => {\r\n    return {\r\n        payload: contact,\r\n        type: types.UPDATE_CONTACT\r\n    }\r\n}\r\n\r\nconst setSearch = (inputValue) => {\r\n    return {\r\n        payload: inputValue,\r\n        type: types.SET_SEARCH\r\n    }\r\n}\r\n\r\nexport { addContact, deleteContact, updateContact, setSearch }","import React from 'react'\r\nimport ContactCard from '../ContactCard/ContactCard'\r\nimport SearchBar from '../SearchBar/SearchBar'\r\nimport './ContactsContainer.scss'\r\nimport { Link } from 'react-router-dom'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\n\r\nfunction ContactsContainer({ contacts, search }) {\r\n    \r\n    let filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(search.toLowerCase()) || contact.phone.toString().includes(search))\r\n\r\n    return (\r\n        <div className='ContactsContainer'>\r\n            <div className=\"ContactsContainer-navbar\">\r\n                <div className=\"navbar-photo\">\r\n                    <img src={'https://api.adorable.io/avatars/256/Ali@adorable.png'} alt='profile' />\r\n                </div>\r\n                <div className=\"navbar-title\">Phone Book</div>\r\n                <div className=\"navbar-btn\">\r\n                    <Link to='/add'>\r\n                        <button><FontAwesomeIcon icon={faPlus} /></button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            <SearchBar />\r\n            <div className=\"table-header\">\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Recents</th>\r\n                            <th>Favorites</th>\r\n                            <th>Missed</th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n            <div className=\"table-body\">\r\n                <table>\r\n                    <tbody>\r\n                        {filteredContacts.map(contact => (\r\n                            <tr>\r\n                                <ContactCard contact={contact} key={contact.id} />\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        contacts: state.contacts.contacts,\r\n        search: state.contacts.search\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ContactsContainer)\r\n","import React, { useState } from 'react'\r\nimport './CreateContact.scss'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { faChevronLeft, faCheck, faBroom } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { connect } from 'react-redux'\r\nimport { addContact } from '../../redux/contacts/contacts.actions'\r\n\r\n\r\nfunction CreateContact({ addContact }) {\r\n\r\n    const history = useHistory()\r\n    const [contact, setContact] = useState({\r\n        id: '',\r\n        name: '',\r\n        phone: '',\r\n        email: '',\r\n        address: '',\r\n        details: ''\r\n    })\r\n\r\n    const createContactHandler = (newContact) => {\r\n        if (newContact.name) {\r\n            addContact(newContact)\r\n        }\r\n    }\r\n\r\n    const changeHandler = (e) => {\r\n        let { target: { name, value } } = e\r\n        setContact({ ...contact, [name]: value })\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        createContactHandler({ ...contact });\r\n        history.push('/')\r\n    }\r\n\r\n    const clearButtonHandler = () => {\r\n        setContact({ id: '', name: '', phone: '', email: '', address: '', details: '' })\r\n    }\r\n\r\n    const { id, name, phone, email, address, details } = contact\r\n    return (\r\n        <div class=\"CreateContact\">\r\n            <div className=\"CreateContact-navbar\">\r\n                <div className=\"navbar-btn\">\r\n                    <Link to=\"/\">\r\n                        <button><FontAwesomeIcon icon={faChevronLeft} /></button>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"navbar-title\">Add Contact</div>\r\n                <div></div>\r\n            </div>\r\n            <div className=\"CreateContact-header\">\r\n                <button className=\"btn clear-btn\" onClick={clearButtonHandler}><FontAwesomeIcon icon={faBroom} /></button>\r\n                <button className=\"btn add-btn\" type=\"submit\" onClick={submitHandler}><FontAwesomeIcon icon={faCheck} /></button>\r\n            </div>\r\n            <div className=\"CreateContact-form\">\r\n                <div className=\"form-inputs\">\r\n                    <input type=\"number\" value={id} onChange={changeHandler} name=\"id\" placeholder=\"ID\" />\r\n                    <input type=\"text\" value={name} onChange={changeHandler} name=\"name\" placeholder=\"Name\" />\r\n                    <input type=\"email\" value={email} onChange={changeHandler} name=\"email\" placeholder=\"Email\" />\r\n                    <input type=\"tel\" value={phone} onChange={changeHandler} name=\"phone\" placeholder=\"Phone No.\" />\r\n                    <input type=\"text\" value={address} onChange={changeHandler} name=\"address\" placeholder=\"Address ...\" />\r\n                    <input type=\"text\" value={details} onChange={changeHandler} name=\"details\" placeholder=\"details\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default connect(null, { addContact })(CreateContact)","import React, { useState } from 'react'\r\nimport { useParams, Link, useHistory } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPen, faCommentDots, faPhoneAlt, faVideo, faEnvelope, faChevronLeft, faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { deleteContact, updateContact } from '../../redux/contacts/contacts.actions'\r\nimport './ContactDetails.scss'\r\n\r\nfunction ContactDetails({ contacts, deleteContact, updateContact }) {\r\n\r\n    const history = useHistory()\r\n    const { id } = useParams()\r\n    const [editMode, setEditMode] = useState(0)\r\n    const contact = contacts.find(contact => contact.id === +id)\r\n\r\n    const removeHanlder = (id) => {\r\n        deleteContact(id)\r\n        history.push('/')\r\n    }\r\n\r\n    const editContactHandler = (event, prevContact) => {\r\n        const copyContacts = [...contacts]\r\n        const { target: { name, value } } = event\r\n        const editedContact = { ...prevContact, [name]: value }\r\n        const nextContact = copyContacts.find(contact => contact.id === prevContact.id)\r\n        Object.keys(nextContact).forEach(contactKey => nextContact[`${contactKey}`] = editedContact[`${contactKey}`])\r\n\r\n        updateContact(copyContacts)\r\n    }\r\n\r\n    return (\r\n        <div className=\"ContactDetails\">\r\n            <div className=\"contactDetails-navbar\">\r\n\r\n                <Link to=\"/\">\r\n                    <button className=\"btn btn-nav btn-back\">\r\n                        <FontAwesomeIcon icon={faChevronLeft} />\r\n                    </button>\r\n                </Link>\r\n                {editMode === contact.id ? <tr>\r\n                    <button className=\"btn btn-nav btn-save\" onClick={() => setEditMode(0)}><FontAwesomeIcon icon={faCheck} /></button>\r\n                </tr> :\r\n                    <tr>\r\n                        <button className=\"btn btn-nav btn-edit\" onClick={() => setEditMode(contact.id)}><FontAwesomeIcon icon={faPen} /></button>\r\n                    </tr>\r\n                }\r\n            </div>\r\n            <div className=\"contactDetails-info\">\r\n                <div className=\"contactDetails-info--image\">\r\n                    <img src={'https://api.adorable.io/avatars/256/Ali@adorable.png' + contact.id} alt='profile' />\r\n                </div>\r\n                <div className=\"contactDetails-info--title\">\r\n                    {editMode === contact.id ? <input className=\"input-info\" name=\"name\" value={contact.name} onChange={(e) => editContactHandler(e, contact)} /> :\r\n                        `${contact.name}`\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"contactDetails-info--subtitle\">\r\n                    {contact.phone}\r\n                </div>\r\n            </div>\r\n            <div className=\"table-header\">\r\n                <table>\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th><button className=\"btn btn-header btn-message\"><FontAwesomeIcon icon={faCommentDots} /></button></th>\r\n                            <th><button className=\"btn btn-header btn-phone\"><FontAwesomeIcon icon={faPhoneAlt} /></button></th>\r\n                            <th><button className=\"btn btn-header btn-video\"><FontAwesomeIcon icon={faVideo} /></button></th>\r\n                            <th><button className=\"btn btn-header btn-mail\"><FontAwesomeIcon icon={faEnvelope} /></button></th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n            <div className=\"table-body\">\r\n                <table>\r\n                    <tbody>\r\n                        {editMode === contact.id ?\r\n                            <>\r\n                                <tr>\r\n                                    <div className='tr-info'>\r\n                                        <div className=\"tr-title\">Mobile</div>\r\n                                        <div className=\"tr-subtitle__edit\">\r\n                                            <input name=\"phone\" value={contact.phone} onChange={(e) => editContactHandler(e, contact)} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Email</div>\r\n                                        <div className=\"tr-subtitle__edit\"><input name=\"email\" value={contact.email} onChange={(e) => editContactHandler(e, contact)} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Address</div>\r\n                                        <div className=\"tr-subtitle__edit\"><input name=\"address\" value={contact.address} onChange={(e) => editContactHandler(e, contact)} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className='tr-info'>\r\n                                        <div className=\"tr-title\">Description</div>\r\n                                        <div className=\"tr-subtitle__edit\">\r\n                                            <input name=\"details\" value={contact.details} onChange={(e) => editContactHandler(e, contact)} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n                                </tr>\r\n                                <tr>\r\n                                    <button className=\"btn btn-remove\" onClick={() => removeHanlder(contact.id)}>Remove</button>\r\n                                </tr>\r\n\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Mobile</div>\r\n                                        <div className=\"tr-subtitle\">{contact.phone}</div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Email</div>\r\n                                        <div className=\"tr-subtitle\">{contact.email}</div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Address</div>\r\n                                        <div className=\"tr-subtitle\">{contact.address}</div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Description</div>\r\n                                        <div className=\"tr-subtitle\">{contact.details}</div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n\r\n                                </tr>\r\n\r\n                            </>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        contacts: state.contacts.contacts\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { deleteContact, updateContact })(ContactDetails)","import React from 'react'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from '../../redux/store.config'\r\n\r\nimport ContactsContainer from '../ContactsContainer/ContactsContainer'\r\nimport CreateContact from '../CreateContact/CreateContact'\r\nimport ContactDetails from '../ContactDetails/ContactDetails'\r\n\r\nfunction PhoneBook() {\r\n  return (\r\n    <Provider store={store}>\r\n      <container>\r\n        <Router>\r\n          <Switch>\r\n            <Route path={`/contact/:id`} >\r\n              <ContactDetails />\r\n            </Route>\r\n            <Route exact path={'/add'}>\r\n              <CreateContact />\r\n            </Route>\r\n            <Route path={`/`}>\r\n              <ContactsContainer />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </container>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default PhoneBook\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PhoneBook from './Components/PhoneBook/PhoneBook'\n\n\nexport default function App() {\n  return (\n    <PhoneBook />\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}