{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/ContactCard/ContactCard.js","Components/ContactsContainer/ContactsContainer.js","Components/CreateContact/CreateContact.js","Components/PhoneBook/PhoneBook.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","Form","Row","Col","Group","InputGroup","Control","onChange","e","filter","placeholder","Button","variant","ContactCard","contact","remove","editContactHandler","useState","editMode","setEditMode","id","name","value","firstName","lastName","phone","email","address","birthday","details","onClick","ContactsContainer","contacts","Table","responsive","hover","striped","className","map","key","CreateContact","add","setContact","changeHandler","target","submitHandler","preventDefault","onSubmit","type","PhoneBook","setContacts","search","setSearch","filteredContacts","toLowerCase","includes","toString","Container","fluid","newContact","event","prevContact","copyContacts","editedContact","find","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.540f83ea.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Form, InputGroup, Button, Row, Col } from 'react-bootstrap'\r\n\r\n\r\n\r\nfunction SearchBar(props) {\r\n    return (\r\n        <Form>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group>\r\n                        <InputGroup>\r\n                            <Form.Control onChange={e => props.filter(e)} placeholder=\"Search the contact ... \" />\r\n                            <Button variant='primary'>Search</Button>\r\n                        </InputGroup>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import React, { useState } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\n\r\n\r\n\r\nfunction ContactCard(props) {\r\n    const { contact, remove, editContactHandler } = props\r\n    const [editMode, setEditMode] = useState(0)\r\n\r\n    return (\r\n        <tr>\r\n            {editMode === contact.id ? <>\r\n                <td>{contact.id}</td>\r\n                <td><input name=\"firstName\" value={contact.firstName} onChange={(e) => editContactHandler(e, contact)} /></td>\r\n                <td><input name=\"lastName\" value={contact.lastName} onChange={(e) => editContactHandler(e, contact)} /></td>\r\n                <td><input name=\"phone\" value={contact.phone} onChange={(e) => editContactHandler(e, contact)} /></td>\r\n                <td><input name=\"email\" value={contact.email} onChange={(e) => editContactHandler(e, contact)} /></td>\r\n                <td><input name=\"address\" value={contact.address} onChange={(e) => editContactHandler(e, contact)} /></td>\r\n                <td><input name=\"birthday\" value={contact.birthday} onChange={(e) => editContactHandler(e, contact)} /></td>\r\n                <td><input name=\"details\" value={contact.details} onChange={(e) => editContactHandler(e, contact)} /></td>\r\n                <td>\r\n                    <Button variant=\"primary\" onClick={() => setEditMode(0)}>Save</Button>\r\n                </td>\r\n            </>\r\n                : <>\r\n                    <td>{contact.id}</td>\r\n                    <td>{contact.firstName}</td>\r\n                    <td>{contact.lastName}</td>\r\n                    <td>{contact.phone}</td>\r\n                    <td>{contact.email}</td>\r\n                    <td>{contact.address}</td>\r\n                    <td>{contact.birthday}</td>\r\n                    <td>{contact.details}</td>\r\n                    <td>\r\n                        <Button variant=\"primary\" onClick={() => setEditMode(contact.id)}>edit</Button>\r\n                        <Button variant=\"danger\" onClick={() => remove(contact.id)}>Remove</Button>\r\n                    </td>\r\n                </>\r\n            }\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default ContactCard\r\n","import React from 'react'\r\nimport { Table } from 'react-bootstrap'\r\nimport ContactCard from '../ContactCard/ContactCard'\r\n\r\n\r\nfunction ContactsContainer(props) {\r\n    const { contacts, remove, editContactHandler } = props\r\n\r\n\r\n    return (\r\n        <Table responsive hover striped className=\"my-2\">\r\n            <thead className=\"thead-dark\">\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Name</th>\r\n                    <th>Last Name</th>\r\n                    <th>Phone No.</th>\r\n                    <th>Email</th>\r\n                    <th>Address</th>\r\n                    <th>Birthday</th>\r\n                    <th>Details</th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {contacts.map(contact => (\r\n                    <ContactCard contact={contact} key={contact.id} remove={remove} editContactHandler={editContactHandler} />\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default ContactsContainer\r\n","import React, { useState } from 'react'\r\nimport { Form, Row, Col, Button } from 'react-bootstrap'\r\n\r\nfunction CreateContact(props) {\r\n    const { add } = props\r\n    const [contact, setContact] = useState({\r\n        id: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        phone: '',\r\n        email: '',\r\n        address: '',\r\n        birthday: '',\r\n        details: ''\r\n    })\r\n\r\n    const changeHandler = (e) => {\r\n        let { target: { name, value } } = e\r\n        setContact({ ...contact, [name]: value })\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        add({ ...contact })\r\n    }\r\n\r\n    const clearButtonHandler = () => {\r\n        setContact({ id: '', firstName: '', lastName: '', phone: '', email: '', address: '', birthday: '', details: '' })\r\n    }\r\n\r\n    const { id, firstName, lastName, phone, email, address, birthday, details } = contact\r\n    return (\r\n\r\n        <Form onSubmit={submitHandler}>\r\n\r\n            <Form.Group>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Control type=\"number\" value={id} onChange={changeHandler} name=\"id\" placeholder=\"ID\" />\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control type=\"text\" value={firstName} onChange={changeHandler} name=\"firstName\" placeholder=\"First Name\" />\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control type=\"text\" value={lastName} onChange={changeHandler} name=\"lastName\" placeholder=\"Last Name\" />\r\n                    </Col>\r\n                </Row>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Row>\r\n                    <Col><Form.Control type=\"email\" value={email} onChange={changeHandler} name=\"email\" placeholder=\"Email\" /></Col>\r\n                    <Col><Form.Control type=\"tel\" value={phone} onChange={changeHandler} name=\"phone\" placeholder=\"Phone No.\" /></Col>\r\n                    <Col><Form.Control type=\"text\" value={address} onChange={changeHandler} name=\"address\" placeholder=\"Address ...\" /></Col>\r\n                    <Col><Form.Control type=\"date\" value={birthday} onChange={changeHandler} /></Col>\r\n                </Row>\r\n            </Form.Group>\r\n            <Form.Group>\r\n                <Row>\r\n                    <Col><Form.Control type=\"text\" value={details} onChange={changeHandler} name=\"details\" placeholder=\"details\" /></Col>\r\n                </Row>\r\n            </Form.Group>\r\n            <Row>\r\n                <Col className=\"offset-5\">\r\n                    <Button variant=\"warning\" onClick={clearButtonHandler}>Clear</Button>\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={submitHandler}>Add</Button>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default CreateContact","import React, { useState } from 'react'\r\nimport { Container } from 'react-bootstrap'\r\nimport SearchBar from '../SearchBar/SearchBar'\r\nimport ContactsContainer from '../ContactsContainer/ContactsContainer'\r\nimport CreateContact from '../CreateContact/CreateContact'\r\n\r\nfunction PhoneBook() {\r\n  const [contacts, setContacts] = useState([{\r\n    id: 1,\r\n    firstName: 'Mohammad Reza',\r\n    lastName: 'Ahmadi',\r\n    phone: 98912123456,\r\n    email: 'somename@gmail.com',\r\n    address: 'somewhere',\r\n    birthday: '01/01/1111',\r\n    details: 'something to fill the blank'\r\n  }, {\r\n    id: 2,\r\n    firstName: 'Alejandro',\r\n    lastName: 'Gonzales',\r\n    phone: 98912123467,\r\n    email: 'somename@gmail.com',\r\n    address: 'somewhere',\r\n    birthday: '01/01/1111',\r\n    details: 'something to fill the blank'\r\n  }, {\r\n    id: 3,\r\n    firstName: 'Jorgen',\r\n    lastName: 'Klopp',\r\n    phone: 98912123467,\r\n    email: 'somename@gmail.com',\r\n    address: 'somewhere',\r\n    birthday: '01/01/1111',\r\n    details: 'something to fill the blank'\r\n  }])\r\n\r\n\r\n  const [search, setSearch] = useState('')\r\n\r\n  const filteredContactsHandler = (e) => {\r\n    setSearch(e.target.value)\r\n  }\r\n\r\n  const removeHandler = (id) => {\r\n    setContacts(contacts.filter(contact => contact.id !== id))\r\n  }\r\n\r\n  const createContactHandler = (newContact) => {\r\n    if (newContact.firstName) {\r\n      setContacts([...contacts, newContact])\r\n    }\r\n  }\r\n\r\n  const editContactHandler = (event, prevContact) => {\r\n    let copyContacts = [...contacts]\r\n    const { target: { name, value } } = event\r\n    let editedContact = { ...prevContact, [name]: value }\r\n\r\n    copyContacts.find(contact => contact.id === prevContact.id).firstName = editedContact.firstName\r\n    copyContacts.find(contact => contact.id === prevContact.id).lastName = editedContact.lastName\r\n    copyContacts.find(contact => contact.id === prevContact.id).phone = editedContact.phone\r\n    copyContacts.find(contact => contact.id === prevContact.id).email = editedContact.email\r\n    copyContacts.find(contact => contact.id === prevContact.id).address = editedContact.address\r\n    copyContacts.find(contact => contact.id === prevContact.id).birthday = editedContact.birthday\r\n    copyContacts.find(contact => contact.id === prevContact.id).details = editedContact.details\r\n    \r\n    setContacts(copyContacts)\r\n  }\r\n\r\n  let filteredContacts = contacts.filter(contact => contact.firstName.toLowerCase().includes(search.toLowerCase()) || contact.phone.toString().includes(search))\r\n  return (\r\n    <Container fluid={\"md\"} className=\"my-4\">\r\n      <SearchBar filter={filteredContactsHandler} />\r\n      <CreateContact add={createContactHandler} />\r\n      <ContactsContainer contacts={filteredContacts} remove={removeHandler} editContactHandler={editContactHandler} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default PhoneBook","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PhoneBook from './Components/PhoneBook/PhoneBook'\n\n\nexport default function App() {\n  return (\n    <PhoneBook />\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}