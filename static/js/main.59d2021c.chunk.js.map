{"version":3,"sources":["Components/ContactCard/ContactCard.js","Components/SearchBar/SearchBar.js","Components/ContactsContainer/ContactsContainer.js","Components/CreateContact/CreateContact.js","Components/ContactDetails/ContactDetails.js","Components/PhoneBook/PhoneBook.js","App.js","serviceWorker.js","index.js"],"names":["ContactCard","props","contact","to","id","className","src","alt","name","phone","SearchBar","onChange","e","filter","placeholder","ContactsContainer","contacts","icon","faPlus","map","key","CreateContact","add","useState","email","address","details","setContact","changeHandler","target","value","class","faChevronLeft","onClick","faBroom","type","preventDefault","faCheck","ContactDetails","useParams","remove","editContactHandler","editMode","setEditMode","find","faPen","faCommentDots","faPhoneAlt","faVideo","faEnvelope","PhoneBook","setContacts","search","setSearch","filteredContacts","toLowerCase","includes","toString","path","event","prevContact","copyContacts","editedContact","nextContact","Object","keys","forEach","contactKey","exact","newContact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.59d2021c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './ContactCard.scss'\r\n\r\n\r\nfunction ContactCard(props) {\r\n    const { contact } = props\r\n\r\n    return (\r\n        <td>\r\n            <Link to={`/contact/${contact.id}`}>\r\n                <div className='ContactCard'>\r\n                    <div className='ContactCard-image'>\r\n                        <img src={'https://api.adorable.io/avatars/256/Ali@adorable.png' + contact.id} alt='profile' />\r\n                    </div>\r\n                    <div className='ContactCard-name'>\r\n                        <div className='ContactCard-name--title'>{contact.name}</div>\r\n                        <div className='ContactCard-name--subtitle'>{contact.phone}</div>\r\n                    </div>\r\n                    <div></div>\r\n                </div>\r\n            </Link>\r\n        </td >\r\n    )\r\n}\r\n\r\nexport default ContactCard\r\n","import React from 'react'\r\nimport './SearchBar.scss'\r\n\r\n\r\n\r\nfunction SearchBar(props) {\r\n    return (\r\n        <div className=\"SearchBar\">\r\n            <input onChange={e => props.filter(e)} placeholder=\"Search the contact ... \" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import React from 'react'\r\nimport ContactCard from '../ContactCard/ContactCard'\r\nimport SearchBar from '../SearchBar/SearchBar'\r\nimport './ContactsContainer.scss'\r\nimport { Link } from 'react-router-dom'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n\r\n\r\nfunction ContactsContainer(props) {\r\n    const { contacts, filter } = props\r\n\r\n\r\n    return (\r\n        <div className='ContactsContainer'>\r\n            <div className=\"ContactsContainer-navbar\">\r\n                <div className=\"navbar-photo\">\r\n                <img src={'https://api.adorable.io/avatars/256/Ali@adorable.png'} alt='profile' />\r\n                </div>\r\n                <div className=\"navbar-title\">Phone Book</div>\r\n                <div className=\"navbar-btn\">\r\n                    <Link to='/add'>\r\n                        <button><FontAwesomeIcon icon={faPlus} /></button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            <SearchBar filter={filter} />\r\n            <div className=\"table-header\">\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Recents</th>\r\n                            <th>Favorites</th>\r\n                            <th>Missed</th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n            <div className=\"table-body\">\r\n                <table>\r\n                    <tbody>\r\n                        {contacts.map(contact => (\r\n                            <tr>\r\n                                <ContactCard contact={contact} key={contact.id} />\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactsContainer\r\n","import React, { useState } from 'react'\r\nimport './CreateContact.scss'\r\nimport { Link } from 'react-router-dom'\r\nimport { faChevronLeft, faCheck, faBroom } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n\r\nfunction CreateContact(props) {\r\n    const { add } = props\r\n    const [contact, setContact] = useState({\r\n        id: '',\r\n        name: '',\r\n        phone: '',\r\n        email: '',\r\n        address: '',\r\n        details: ''\r\n    })\r\n\r\n    const changeHandler = (e) => {\r\n        let { target: { name, value } } = e\r\n        setContact({ ...contact, [name]: value })\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        add({ ...contact })\r\n    }\r\n\r\n    const clearButtonHandler = () => {\r\n        setContact({ id: '', name: '', phone: '', email: '', address: '', details: '' })\r\n    }\r\n\r\n    const { id, name, phone, email, address, details } = contact\r\n    return (\r\n        <div class=\"CreateContact\">\r\n            <div className=\"CreateContact-navbar\">\r\n                <div className=\"navbar-btn\">\r\n                    <Link to=\"/\">\r\n                        <button><FontAwesomeIcon icon={faChevronLeft} /></button>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"navbar-title\">Add Contact</div>\r\n                <div></div>\r\n            </div>\r\n            <div className=\"CreateContact-header\">\r\n                <button className=\"btn clear-btn\" onClick={clearButtonHandler}><FontAwesomeIcon icon={faBroom} /></button>\r\n                <button className=\"btn add-btn\" type=\"submit\" onClick={submitHandler}><FontAwesomeIcon icon={faCheck} /></button>\r\n            </div>\r\n            <div className=\"CreateContact-form\">\r\n                <div className=\"form-inputs\">\r\n                    <input type=\"number\" value={id} onChange={changeHandler} name=\"id\" placeholder=\"ID\" />\r\n                    <input type=\"text\" value={name} onChange={changeHandler} name=\"name\" placeholder=\"Name\" />\r\n                    <input type=\"email\" value={email} onChange={changeHandler} name=\"email\" placeholder=\"Email\" />\r\n                    <input type=\"tel\" value={phone} onChange={changeHandler} name=\"phone\" placeholder=\"Phone No.\" />\r\n                    <input type=\"text\" value={address} onChange={changeHandler} name=\"address\" placeholder=\"Address ...\" />\r\n                    <input type=\"text\" value={details} onChange={changeHandler} name=\"details\" placeholder=\"details\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateContact","import React, { useState } from 'react'\r\nimport { useParams, Link } from 'react-router-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPen, faCommentDots, faPhoneAlt, faVideo, faEnvelope, faChevronLeft, faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport './ContactDetails.scss'\r\n\r\nfunction ContactDetails(props) {\r\n    const { id } = useParams()\r\n    const { contacts, remove, editContactHandler } = props\r\n    const [editMode, setEditMode] = useState(0)\r\n    const contact = contacts.find(contact => contact.id === +id)\r\n\r\n    return (\r\n        <div className=\"ContactDetails\">\r\n            <div className=\"contactDetails-navbar\">\r\n\r\n                <Link to=\"/\">\r\n                    <button className=\"btn btn-nav btn-back\">\r\n                        <FontAwesomeIcon icon={faChevronLeft} />\r\n                    </button>\r\n                </Link>\r\n                {editMode === contact.id ? <tr>\r\n                    <button className=\"btn btn-nav btn-save\" onClick={() => setEditMode(0)}><FontAwesomeIcon icon={faCheck} /></button>\r\n                </tr> :\r\n                    <tr>\r\n                        <button className=\"btn btn-nav btn-edit\" onClick={() => setEditMode(contact.id)}><FontAwesomeIcon icon={faPen} /></button>\r\n                    </tr>\r\n                }\r\n            </div>\r\n            <div className=\"contactDetails-info\">\r\n                <div className=\"contactDetails-info--image\">\r\n                    <img src={'https://api.adorable.io/avatars/256/Ali@adorable.png' + contact.id} alt='profile' />\r\n                </div>\r\n                <div className=\"contactDetails-info--title\">\r\n                    {editMode === contact.id ? <input className=\"input-info\" name=\"name\" value={contact.name} onChange={(e) => editContactHandler(e, contact)} /> :\r\n                        `${contact.name}`\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"contactDetails-info--subtitle\">\r\n                    {contact.phone}\r\n                </div>\r\n            </div>\r\n            <div className=\"table-header\">\r\n                <table>\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th><button className=\"btn btn-header btn-message\"><FontAwesomeIcon icon={faCommentDots} /></button></th>\r\n                            <th><button className=\"btn btn-header btn-phone\"><FontAwesomeIcon icon={faPhoneAlt} /></button></th>\r\n                            <th><button className=\"btn btn-header btn-video\"><FontAwesomeIcon icon={faVideo} /></button></th>\r\n                            <th><button className=\"btn btn-header btn-mail\"><FontAwesomeIcon icon={faEnvelope} /></button></th>\r\n                        </tr>\r\n                    </thead>\r\n                </table>\r\n            </div>\r\n            <div className=\"table-body\">\r\n                <table>\r\n                    <tbody>\r\n                        {editMode === contact.id ?\r\n                            <>\r\n                                {/* <td>{contact.id}</td> */}\r\n                                {/* <tr><input name=\"firstName\" value={contact.firstName} onChange={(e) => editContactHandler(e, contact)} /></tr> */}\r\n                                {/* <tr><input name=\"lastName\" value={contact.lastName} onChange={(e) => editContactHandler(e, contact)} /></tr> */}\r\n                                <tr>\r\n                                    <div className='tr-info'>\r\n                                        <div className=\"tr-title\">Mobile</div>\r\n                                        <div className=\"tr-subtitle__edit\">\r\n                                            <input name=\"phone\" value={contact.phone} onChange={(e) => editContactHandler(e, contact)} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Email</div>\r\n                                        <div className=\"tr-subtitle__edit\"><input name=\"email\" value={contact.email} onChange={(e) => editContactHandler(e, contact)} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Address</div>\r\n                                        <div className=\"tr-subtitle__edit\"><input name=\"address\" value={contact.address} onChange={(e) => editContactHandler(e, contact)} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className='tr-info'>\r\n                                        <div className=\"tr-title\">Description</div>\r\n                                        <div className=\"tr-subtitle__edit\">\r\n                                            <input name=\"details\" value={contact.details} onChange={(e) => editContactHandler(e, contact)} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n                                </tr>\r\n                                <tr>\r\n                                    <button className=\"btn btn-remove\" onClick={() => remove(contact.id)}>Remove</button>\r\n                                </tr>\r\n\r\n                            </>\r\n                            :\r\n                            <>\r\n                                {/* <tr>{contact.id}</tr> */}\r\n                                {/* <tr>{contact.firstName}</tr> */}\r\n                                {/* <tr>{contact.lastName}</tr> */}\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Mobile</div>\r\n                                        <div className=\"tr-subtitle\">{contact.phone}</div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Email</div>\r\n                                        <div className=\"tr-subtitle\">{contact.email}</div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Address</div>\r\n                                        <div className=\"tr-subtitle\">{contact.address}</div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                    <div className=\"tr-info\">\r\n                                        <div className=\"tr-title\">Description</div>\r\n                                        <div className=\"tr-subtitle\">{contact.details}</div>\r\n                                    </div>\r\n                                    <div className=\"tr-icon\"></div>\r\n\r\n                                </tr>\r\n\r\n                            </>\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ContactDetails\r\n","import React, { useState } from 'react'\r\nimport ContactsContainer from '../ContactsContainer/ContactsContainer'\r\nimport CreateContact from '../CreateContact/CreateContact'\r\nimport ContactDetails from '../ContactDetails/ContactDetails'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nfunction PhoneBook() {\r\n  const [contacts, setContacts] = useState([{\r\n    id: 1,\r\n    name: 'Ed Boon',\r\n    phone: 98912123456,\r\n    email: 'noobde@gmail.com',\r\n    address: 'Los Angles, CA',\r\n    details: 'get over here!'\r\n  }, {\r\n    id: 2,\r\n    name: 'Alejandro Gonzales Inarrito',\r\n    phone: 98912123467,\r\n    email: 'AlejandroGInarrito@gmail.com',\r\n    address: 'Mexico city, Mexico',\r\n    details: 'Working on my new title, not the revenant'\r\n  }, {\r\n    id: 3,\r\n    name: 'Jorgen Klopp',\r\n    phone: 98912123467,\r\n    email: 'JorgenKlopp@gmail.com',\r\n    address: 'Liverpool, England',\r\n    details: \"I'm coach of Liverpool FC\"\r\n  }, {\r\n\r\n    id: 4,\r\n    name: 'Hanz Zimmer',\r\n    phone: 98912123467,\r\n    email: 'hansimmer@gmail.com',\r\n    address: 'Berlin, Germany',\r\n    details: \"Batman OST is my work\"\r\n  }\r\n  ])\r\n\r\n\r\n  const [search, setSearch] = useState('')\r\n\r\n  const filteredContactsHandler = (e) => {\r\n    setSearch(e.target.value)\r\n  }\r\n\r\n  const removeHandler = (id) => {\r\n    setContacts(contacts.filter(contact => contact.id !== id))\r\n  }\r\n\r\n\r\n  const createContactHandler = (newContact) => {\r\n    if (newContact.name) {\r\n      setContacts([...contacts, newContact])\r\n    }\r\n  }\r\n\r\n  const editContactHandler = (event, prevContact) => {\r\n    const copyContacts = [...contacts]\r\n    const { target: { name, value } } = event\r\n    const editedContact = { ...prevContact, [name]: value }\r\n    const nextContact = copyContacts.find(contact => contact.id === prevContact.id)\r\n    Object.keys(nextContact).forEach(contactKey => nextContact[`${contactKey}`] = editedContact[`${contactKey}`])\r\n\r\n    setContacts(copyContacts)\r\n  }\r\n\r\n\r\n  let filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(search.toLowerCase()) || contact.phone.toString().includes(search))\r\n  return (\r\n    <container>\r\n      <Router>\r\n        <Switch>\r\n          <Route path={`/contact/:id`} >\r\n            <ContactDetails contacts={contacts} remove={removeHandler} editContactHandler={editContactHandler} />\r\n          </Route>\r\n          <Route exact path={'/add'}>\r\n            <CreateContact add={createContactHandler} />\r\n          </Route>\r\n          <Route path={`/`}>\r\n            <ContactsContainer filter={filteredContactsHandler} contacts={filteredContacts} />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </container>\r\n  )\r\n}\r\n\r\nexport default PhoneBook","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PhoneBook from './Components/PhoneBook/PhoneBook'\n\n\nexport default function App() {\n  return (\n    <PhoneBook />\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}